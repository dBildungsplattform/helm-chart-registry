nameOverride: ""
fullnameOverride: ""
namespaceOverride: ""

backendHostname: ""
keycloakHostname: ""

containerSecurityContext:
  enabled: true
  runAsUser: 1000
  runAsNonRoot: true
  privileged: false
  readOnlyRootFilesystem: false
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: "RuntimeDefault"

restartPolicy: Always
environment: prod

database:
  name: "dbildungs_iam_server"
  host: ""
  password: ""
  username: "dbildungs_iam_server"

auth:
  # existingSecret: Refers to a secret already present in the cluster, which is required.
  existingSecret: ""
  secretName: dbildungs-iam-server
  keycloak_adminSecret: ""
  keycloak_clientSecret: ""
  secrets_json: ""
  frontend_sessionSecret: ""


backend:
  replicaCount: 1
  image:
    repository: ghcr.io/dbildungsplattform/dbildungs-iam-server
    tag: ""
    pullPolicy: Always
  containerPorts:
    http: 8080
  resources:
    limits:
      cpu: 2
      memory: 4G
    requests:
      cpu: 200m
      memory: 200Mi
  startupProbe:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 60
    failureThreshold: 5
    httpGet:
      scheme: 'HTTP'
      port: 8080
      path: '/health'
  livenessProbe:
    enabled: true
    initialDelaySeconds: 10
    httpGet:
      scheme: 'HTTP'
      port: 8080
      path: '/health'
  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    httpGet:
      scheme: 'HTTP'
      port: 8080
      path: '/health'
  dbseeding:
    enabled: true
    command: [ "node", "dist/src/console/main.js", "db", "seed", "dev", "" ]
  ingress:
    enabled: true
    ingressClassName: nginx
    pathType: Prefix
    portnumber: 80
    automountServiceAccountToken: false
    paths:
      - /api
      - /docs
      - /docs-json
      - /docs-yaml
    annotations: []
  service:
    type: ClusterIP
    ports:
      http: 80
  serviceMonitor:
    enabled: true
    endpoints:
      - port: "web"
  extraEnvVars: []
  extraVolumes: []
  volumeMounts:
    - mountPath: /app/config/config.json
      subPath: config-json
      name: config-volume
      readOnly: true
    - mountPath: /app/config/secrets.json
      subPath: secrets-json
      name: secret-volume
  extraVolumeMounts: []


redis:
  image:
    name: redis
    repository: redis
    tag: "7.2.4"
    pullPolicy: IfNotPresent
  args:
    - "/data/tls/redis.conf"
  containerPorts:
    redis: 6379
  resources:
    limits:
      cpu: 2
      memory: 4G
    requests:
      cpu: 200m
      memory: 200Mi
  livenessProbe:
    enabled: true
    tcpSocket:
      port: 6379
    initialDelaySeconds: 15
    timeoutSeconds: 2
  readinessProbe:
    enabled: true
    tcpSocket:
      port: 6379
    initialDelaySeconds: 5
    timeoutSeconds: 1
  startupProbe:
    enabled: true
    tcpSocket:
      port: 6379
    failureThreshold: 30
    periodSeconds: 10
  service:
    type: ClusterIP
    ports:
      redis: 6379
  extraEnvVars: []
  extraVolumes: []
  extraVolumeMounts: []

ldap:
  enabled: false
#   image:
#     repository: docker.io/osixia/openldap
#     tag: "1.5.0"
#     pullPolicy: IfNotPresent
#   resources:
#     limits:
#       cpu: 2
#       memory: 4G
#     requests:
#       cpu: 200m
#       memory: 200Mi
#   adminPassword: admin
#   configPassword: config
#   service:
#     type: ClusterIP
#     ports:
#       ldap: 389


# https://github.com/jp-gouin/helm-openldap/blob/master/values.yaml
openldap:
  # enabled: true
  global:
    ldapDomain: "schule-sh.de" # translates to LDAP_ROOT
    existingSecret: "dbildungs-iam-ldap" 
    adminUser: "admin" # LDAP_ADMIN_USERNAME
    configUserEnabled: "true" # LDAP_CONFIG_ADMIN_ENABLED
    configUser: "config"  #LDAP_CONFIG_ADMIN_USERNAME
    ldapPort: 389 # LDAP_PORT_NUMBER
    sslLdapPort: 636 # LDAP_LDAPS_PORT_NUMBER
  image:
    # From repository https://hub.docker.com/r/bitnami/openldap/
    repository: bitnami/openldap
    #tag: 2.6.3
    # Temporary fix
    # repository: jpgouin/openldap
    tag: 2.6.3
    pullPolicy: Always
    pullSecrets: []
  env:
    BITNAMI_DEBUG: "true"
    LDAP_LOGLEVEL: "256"
    LDAP_TLS_ENFORCE: "false"
    LDAPTLS_REQCERT: "never"
    LDAP_ENABLE_TLS: "yes"
    LDAP_SKIP_DEFAULT_TREE: "no"
    # added by me 
    # LDAP_REQUIRE_TLS: "true" # not sure whether this is necessary
    # Add the RFC
    # https://github.com/osixia/docker-openldap/blob/635034a75878773f8576d646422cf26e43741fab/image/service/slapd/assets/config/bootstrap/schema/rfc2307bis.ldif#L5
    # LDAP_EXTRA_SCHEMAS: "" 
    LDAP_ENABLE_ACCESSLOG: "true"
    LDAP_ACCESSLOG_LOGPURGE: "07+00:00 01+00:00"
  replicaCount: 3
  replication:
    enabled: true
    # Enter the name of your cluster, defaults to "cluster.local"
    clusterName: "cluster.local"
    retry: 60
    timeout: 1
    interval: 00:00:00:10
    starttls: "critical"
    tls_reqcert: "never"
  persistence:
    enabled: true
    # existingClaim: openldap-pvc
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    storageClass: ""
  resources:
    limits:
      cpu: 2
      memory: 4G
    requests:
      cpu: 200m
      memory: 200Mi