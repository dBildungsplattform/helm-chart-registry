apiVersion: v1
kind: ConfigMap
metadata:
  name: entrypoint-script
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "openldap.name" . }}
    chart: {{ template "openldap.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- if .Values.extraLabels }}
{{ toYaml .Values.extraLabels | indent 4 }}
{{- end }}
data:
  01.sh: |
    #!/bin/sh
    set -e
    # found no way to check if ldap server is running with a while statement
    sleep 5
    # it is important that the modify.ldif runs first, otherwise it fails since the ACLS have to get adjusted first 
    ldapmodify -Y EXTERNAL -H ldapi:/// -f /ldap-configuration/modify/modify.ldif
    # no sure why this sleep is needed again - but it is
    sleep 10
    # /bin/bash /script/02.sh
    ldapapply -Y EXTERNAL -H ldapi:/// -f /script/schemas.ldif


  # this script is needed so that Helm Chart is stable if persistence is enabled
  # it applies changes if they are new, but modifies them if they already exist
  02.sh: |  
    LDIF_FILE="/ldap-configuration/apply/apply.ldif"

    # Function to process each entry
    process_entry() {
      local entry_dn="$1"
      local entry_ldif="$2"

      # Check if entry exists
      ldapsearch -Y External -H ldapi:/// -b "$entry_dn" -s base -LLL dn > /dev/null 2>&1

      if [ $? -eq 0 ]; then
        echo "Entry already exists: $entry_dn, updating entry by running ldapmodify"
        echo "$entry_ldif" | sed 's/^dn: .*/changetype: modify/' | ldapmodify -Y External -H ldapi:/// 
      else
        echo "Entry does not exist, adding entry: $entry_dn"
        echo "$entry_ldif" | ldapadd -Y External -H ldapi:/// 
      fi
    }

    # Read the LDIF file and process each entry
    current_dn=""
    current_entry=""

    # Read the LDIF file line by line
    while IFS= read -r line || [[ -n "$line" ]]; do
        # Check for dn line to identify new entry
        if echo "$line" | grep -q "^dn:"; then
            # If current_dn is set, process the previous entry
            if [ -n "$current_dn" ]; then
                process_entry "$current_dn" "$current_entry"
            fi
            # Start a new entry
            current_dn=$(echo "$line" | cut -d' ' -f2-)
            current_entry="$line"
        else
            # Accumulate the current entry
            current_entry="$current_entry"$'\n'"$line"
        fi
    done < "$LDIF_FILE"

    # Process the last entry in the file
    if [[ -n "$current_dn" ]]; then
      process_entry "$current_dn" "$current_entry"
    fi


  schemas.ldif: |
    # add custom schema 
    dn: cn=ucsMail,cn=schema,cn=config
    objectClass: olcSchemaConfig
    cn: ucsMail
    olcAttributeTypes: ( 1.3.6.1.4.1.10176.1010.1.1 NAME 'mailPrimaryAddress' DESC 'Primary mailaddresses for the user' EQUALITY caseIgnoreIA5Match SUBSTR caseIgnoreSubstringsMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.26 SINGLE-VALUE )
    olcAttributeTypes: ( 1.3.6.1.4.1.10176.1010.1.2 NAME 'mailAlternativeAddress' DESC 'Secondary (alias) mailaddresses for the same user' EQUALITY caseIgnoreIA5Match SUBSTR caseIgnoreSubstringsMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.26 )
    olcAttributeTypes: ( 1.3.6.1.4.1.10176.1010.1.3 NAME 'mailGlobalSpamFolder'DESC 'Move Spam to global spam folder instead of local spam folder' EQUALITY caseIgnoreIA5Match SYNTAX 1.3.6.1.4.1.1466.115.121.1.26 )
    olcAttributeTypes: ( 1.3.6.1.4.1.10176.1010.1.47 NAME 'mailForwardAddress'DESC 'External mail addresses to forward the users emails to' EQUALITY caseIgnoreMatch SUBSTR caseIgnoreSubstringsMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 )
    olcAttributeTypes: ( 1.3.6.1.4.1.10176.1010.1.51 NAME 'mailForwardCopyToSelf' EQUALITY caseIgnoreMatch SUBSTR caseIgnoreSubstringsMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{10} SINGLE-VALUE )
    olcAttributeTypes: ( 1.3.6.1.4.1.10176.1010.1.60 NAME 'univentionMailHomeServer' DESC 'home server of users mailbox' EQUALITY caseIgnoreMatch SUBSTR caseIgnoreSubstringsMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{256} SINGLE-VALUE )
    olcAttributeTypes: ( 1.3.6.1.4.1.10176.1010.1.92 NAME 'univentionMailUserQuota' DESC 'Mailbox hard quota limit in MB' EQUALITY caseIgnoreMatch SUBSTR caseIgnoreSubstringsMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 )
    olcObjectClasses: ( 1.3.6.1.4.1.10176.1010.2.1 NAME 'univentionMail' DESC 'Univention Mail Preferences' SUP top AUXILIARY MUST uid MAY ( univentionMailHomeServer $ mailPrimaryAddress $ mailAlternativeAddress $ mailGlobalSpamFolder $ univentionMailUserQuota $ mailForwardAddress $ mailForwardCopyToSelf ) )